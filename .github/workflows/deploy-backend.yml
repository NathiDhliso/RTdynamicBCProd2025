name: Deploy Backend to AWS Elastic Beanstalk

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: |
        cd backend
        npm ci --only=production

    - name: Create deployment package
      run: |
        cd backend
        # Remove any legacy EB config that may re-introduce invalid staticfiles mapping
        if [ -f .ebextensions/nodecommand.config ]; then
          echo "Removing legacy .ebextensions/nodecommand.config from workspace before packaging"
          rm -f .ebextensions/nodecommand.config
        fi
        
        # Create a clean deployment package with all necessary files including EB configs
        zip -r ../backend-deploy.zip \
          package.json \
          package-lock.json \
          server.js \
          routes/ \
          services/ \
          .ebextensions/ \
          .platform/ \
          Procfile \
          -x "*.git*" "*.env*" "node_modules/*" ".ebextensions/nodecommand.config"

    - name: List deployment package contents (debug)
      run: |
        echo "Listing backend-deploy.zip contents for verification:"
        unzip -l backend-deploy.zip || true

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Purge invalid staticfiles from configuration templates (pre-deploy)
      run: |
        set -e
        echo "Listing configuration templates for application rtdbc-backend..."
        TEMPLATES=$(aws elasticbeanstalk list-configuration-templates \
          --application-name rtdbc-backend \
          --query 'Templates[].TemplateName' \
          --output text || true)
        echo "Templates found: $TEMPLATES"

        if [ -n "$TEMPLATES" ]; then
          for T in $TEMPLATES; do
            echo "Checking template: $T for invalid staticfiles options..."
            NAMES=$(aws elasticbeanstalk describe-configuration-settings \
              --application-name rtdbc-backend \
              --template-name "$T" \
              --query 'ConfigurationSettings[0].OptionSettings[?Namespace==`aws:elasticbeanstalk:container:nodejs:staticfiles`].OptionName' \
              --output text || true)

            if [ -n "$NAMES" ]; then
              echo "Removing from template $T the following OptionNames: $NAMES"
              for NAME in $NAMES; do
                aws elasticbeanstalk update-configuration-template \
                  --application-name rtdbc-backend \
                  --template-name "$T" \
                  --options-to-remove Namespace=aws:elasticbeanstalk:container:nodejs:staticfiles,OptionName=$NAME || true
              done
            else
              echo "No invalid staticfiles options in template $T"
            fi
          done
        else
          echo "No configuration templates found. Skipping template purge."
        fi

    - name: Purge invalid EB staticfiles options (pre-deploy)
      run: |
        set -e
        echo "Auditing EB environment for invalid staticfiles options..."
        echo "Current invalid options (if any):"
        aws elasticbeanstalk describe-configuration-settings \
          --application-name rtdbc-backend \
          --environment-name rtdbc-production \
          --query 'ConfigurationSettings[0].OptionSettings[?Namespace==`aws:elasticbeanstalk:container:nodejs:staticfiles`]' \
          --output json || true

        echo "Finding OptionNames under aws:elasticbeanstalk:container:nodejs:staticfiles..."
        OPTION_NAMES=$(aws elasticbeanstalk describe-configuration-settings \
          --application-name rtdbc-backend \
          --environment-name rtdbc-production \
          --query 'ConfigurationSettings[0].OptionSettings[?Namespace==`aws:elasticbeanstalk:container:nodejs:staticfiles`].OptionName' \
          --output text || true)

        if [ -z "$OPTION_NAMES" ]; then
          echo "No invalid staticfiles options found. Attempting to remove /public just in case..."
          aws elasticbeanstalk update-environment \
            --application-name rtdbc-backend \
            --environment-name rtdbc-production \
            --options-to-remove Namespace=aws:elasticbeanstalk:container:nodejs:staticfiles,OptionName=/public || true
        else
          echo "Will remove the following OptionNames: $OPTION_NAMES"
          for NAME in $OPTION_NAMES; do
            echo "Removing $NAME from invalid namespace..."
            aws elasticbeanstalk update-environment \
              --application-name rtdbc-backend \
              --environment-name rtdbc-production \
              --options-to-remove Namespace=aws:elasticbeanstalk:container:nodejs:staticfiles,OptionName=$NAME || true
          done
        fi
        echo "Re-check after purge:"
        aws elasticbeanstalk describe-configuration-settings \
          --application-name rtdbc-backend \
          --environment-name rtdbc-production \
          --query 'ConfigurationSettings[0].OptionSettings[?Namespace==`aws:elasticbeanstalk:container:nodejs:staticfiles`]' \
          --output json || true

    - name: Wait for EB environment to be Ready
      run: |
        echo "Waiting for Elastic Beanstalk environment to be Ready..."
        for i in {1..60}; do
          STATUS=$(aws elasticbeanstalk describe-environments \
            --application-name rtdbc-backend \
            --environment-names rtdbc-production \
            --query 'Environments[0].Status' \
            --output text)
          HEALTH=$(aws elasticbeanstalk describe-environments \
            --application-name rtdbc-backend \
            --environment-names rtdbc-production \
            --query 'Environments[0].Health' \
            --output text)
          echo "Attempt $i: Status=$STATUS Health=$HEALTH"
          if [ "$STATUS" = "Ready" ]; then
            echo "Environment is Ready. Proceeding."
            break
          fi
          sleep 10
        done

    - name: Deploy to Elastic Beanstalk
      uses: einaregilsson/beanstalk-deploy@v22
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: rtdbc-backend
        environment_name: rtdbc-production
        region: us-east-1
        version_label: ${{ github.sha }}
        deployment_package: backend-deploy.zip
        existing_bucket_name: elasticbeanstalk-us-east-1-202717921808
        wait_for_environment_recovery: 300

    - name: Update environment variables
      run: |
        aws elasticbeanstalk update-environment \
          --application-name rtdbc-backend \
          --environment-name rtdbc-production \
          --option-settings \
            Namespace=aws:elasticbeanstalk:application:environment,OptionName=NODE_ENV,Value=production \
            Namespace=aws:elasticbeanstalk:application:environment,OptionName=FRONTEND_URL,Value=${{ secrets.FRONTEND_URL }} \
            Namespace=aws:elasticbeanstalk:application:environment,OptionName=AWS_REGION,Value=us-east-1 \
            Namespace=aws:elasticbeanstalk:application:environment,OptionName=FROM_EMAIL,Value=${{ secrets.FROM_EMAIL }} \
            Namespace=aws:elasticbeanstalk:application:environment,OptionName=BUSINESS_EMAIL,Value=${{ secrets.BUSINESS_EMAIL }} \
            Namespace=aws:elasticbeanstalk:application:environment,OptionName=SEND_CONFIRMATION,Value=true \
            Namespace=aws:elasticbeanstalk:application:environment,OptionName=AWS_ACCESS_KEY_ID,Value=${{ secrets.AWS_SES_ACCESS_KEY_ID }} \
            Namespace=aws:elasticbeanstalk:application:environment,OptionName=AWS_SECRET_ACCESS_KEY,Value=${{ secrets.AWS_SES_SECRET_ACCESS_KEY }}

    - name: Get Application URL
      run: |
        URL=$(aws elasticbeanstalk describe-environments \
          --application-name rtdbc-backend \
          --environment-names rtdbc-production \
          --query 'Environments[0].CNAME' \
          --output text)
        echo "üöÄ Backend deployed successfully!"
        echo "üìç Backend URL: https://$URL"
        echo "üí° Add this URL to your Amplify environment variable VITE_API_URL: https://$URL"